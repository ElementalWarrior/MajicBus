@* we need to define the data this view takes, this comes from the "return View(data)" line in the controller *@
@model List<MBBackEnd.Models.TransitViewModels.RouteView>

@* we can then access the data through the "Model" object, notice the capitol M vs m in the line above *@
@* one defines which type to use, and one accesses it *@
<div id="routes" class="col-md-8">
    <h1>Routes</h1>
    <ul class="list-unstyled">
        @* this is a razor file, its mixed html with server logic. *@
        @* it is an interpreted file, IE compiled when needed, you can insert server logic with @ or @{} *@
        @foreach (MBBackEnd.Models.TransitViewModels.RouteView route in Model)
        {
            <li>
                <a href="@Url.Action("ShowStops", new { routeID = route.RouteID })">@route.RouteID - @route.NameLong</a>
            </li>
        }
    </ul>
</div>
    <div id="getRouteInfo">
        <h2>Show Information For Route</h2>
        <form method="get" action="@Url.Action("ShowStops")">
            <div class="input-group">
                <input name="routeID" type="text" class="form-control" placeholder="StopID" />
                <span class="input-group-btn">
                    <input type="submit" class="btn btn-default" value="Go" />
                </span>
            </div>
        </form>
    </div>
<script type="text/javascript">
    var routes = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model));
</script>